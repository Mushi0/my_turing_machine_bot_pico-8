pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- my turing machine chat bot
-- by mushi0

-----------------------------

function _init()
	music(0)
	game = {}
	game_page = 0
	current_loc = {0, 0}
	
	happy_frames = {8, 10}
	sad_frames = {40, 42}
	hp = 0
	sd = 0
	
	criteria_check_id = 1
	number_id = 1
	
	my_guess = {0, 0, 0}
	final_answer = {0, 0, 0}
	
	nb_round = 0
	nb_check = 0
	nb_check_one_round = 0
	checked_crit = {0, 0, 0}
end
-->8
-- main menu

function build_menu()
	build_pc()
	spr(14, 50, 14, 2, 2)
	
	print("choose a game", 35, 55, -5)
	for i = game_page * 21 + 1, min(#games, (game_page + 1) * 21) do
		this_loc = i % 21
		if this_loc == 0 then this_loc = 21 end
		print(i, 15 + ((this_loc - 1) % 7) * 15, 
											72 + flr((this_loc - 1) / 7) * 15, -6)
	end
	print("press ‚ùé to confirm", 25, 120, -5)
	
	rect(10 + current_loc[1] * 15, 
					67	 + current_loc[2] * 15, 
					25 + current_loc[1] * 15, 
					82 + current_loc[2] * 15, 3)
	
	if btnp(‚ùé) then
		game_nb = game_page * 21 + current_loc[2]*7 + current_loc[1] + 1
		this_game = games[game_nb]
		create_game()
		
		_draw = draw_number_screen
		_update = update_number_screen
	end
end

function update_menu()
	if btnp(‚û°Ô∏è) and current_loc[1] <= 5 and game_page * 21 + current_loc[2] * 7 + current_loc[1] + 2 <= #games then
		current_loc[1] = current_loc[1] + 1
	elseif btnp(‚¨ÖÔ∏è) and current_loc[1] >= 1 then
		current_loc[1] = current_loc[1] - 1
	elseif btnp(‚¨áÔ∏è) and game_page * 21 + current_loc[2] * 7 + current_loc[1] + 8 <= #games then
		if current_loc[2] <= 1 then
			current_loc[2] = current_loc[2] + 1
		elseif (game_page + 1) * 21 < #games then
			game_page = game_page + 1
			current_loc[2] = 0
		end
	elseif btnp(‚¨ÜÔ∏è) then
		if current_loc[2] >= 1 then
			current_loc[2] = current_loc[2] - 1
		elseif game_page >= 1 then
			game_page = game_page - 1
			current_loc[2] = 2
		end
	end
end

_draw = build_menu
_update = update_menu
-->8
-- game

function draw_game()
	build_pc()
	
	for i = 1, 4 do
		print(criterias[i]['text'], 30, 65 + i * 10, 7)
	end
	
	print("‚ùé: select üÖæÔ∏è: back", 25, 120, 3)
	
	print(my_guess[1].." "..my_guess[2].." "..my_guess[3], 49, 21, 11)
	for i = 1, 3 do
		spr(12, 39 + 8 * i, 15)
		spr(28, 39 + 8 * i, 24)
	end
	
	spr(13, 47, 13)
	spr(29, 54, 12)
	spr(45, 63, 11)
	
	print("round:"..nb_round, 5, 22, 6)
	print("check:"..nb_check, 5, 30, 6)
	
	print("final\nanswer:", 92, 15, 6)
	print(final_answer[1].." "..final_answer[2].." "..final_answer[3], 94, 32, 11)
	for i = 1, 3 do
		spr(12, 84 + 8 * i, 26)
		spr(28, 84 + 8 * i, 35)
	end
end

function create_game()
	criterias = {}
	for i = 4, 7, 1 do
		one_criteria = {}
		one_criteria['check'] = generate_criteria(this_game[i])
		one_criteria['text'] = criteria_name(this_game[i])
		add(criterias, one_criteria)
	end
end

function generate_criteria(no)
	if no == 1 then
		function criteria(nb)
			if nb[1] == 1 and this_game[1] == 1 then
				return true
			elseif nb[1] > 1 and this_game[1] > 1 then
				return true
			end
			return false
		end
	
	elseif no == 2 then
		function criteria(nb)
			if nb[1] < 3 and this_game[1] < 3 then
				return true
			elseif nb[1] == 3 and this_game[1] == 3 then
				return true
			elseif nb[1] > 3 and this_game[1] > 3 then
				return true
			end
			return false
		end
	
	elseif no == 3 then
		function criteria(nb)
			if nb[2] < 3 and this_game[2] < 3 then
				return true
			elseif nb[2] == 3 and this_game[2] == 3 then
				return true
			elseif nb[2] > 3 and this_game[2] > 3 then
				return true
			end
			return false
		end
	
	elseif no == 4 then
		function criteria(nb)
			if nb[2] < 4 and this_game[2] < 4 then
				return true
			elseif nb[2] == 4 and this_game[2] == 4 then
				return true
			elseif nb[2] > 4 and this_game[2] > 4 then
				return true
			end
			return false
		end
	
	elseif no == 5 then
		function criteria(nb)
			if (nb[1] % 2) == (this_game[1] % 2) then
				return true
			end
			return false
		end
	
	elseif no == 6 then
		function criteria(nb)
			if (nb[2] % 2) == (this_game[2] % 2) then
				return true
			end
			return false
		end
	
	elseif no == 7 then
		function criteria(nb)
			if (nb[3] % 2) == (this_game[3] % 2) then
				return true
			end
			return false
		end
	
	elseif no == 8 then
		function criteria(nb)
			if my_count(nb, 1) == my_count(this_game, 1) then
				return true
			end
			return false
		end
	
	elseif no == 9 then
		function criteria(nb)
			if my_count(nb, 3) == my_count(this_game, 3) then
				return true
			end
			return false
		end
	
	elseif no == 10 then
		function criteria(nb)
			if my_count(nb, 4) == my_count(this_game, 4) then
				return true
			end
			return false
		end
	
	elseif no == 11 then
		function criteria(nb)
			if nb[1] < nb[2] and this_game[1] < this_game[2] then
				return true
			elseif nb[1] == nb[2] and this_game[1] == this_game[2] then
				return true
			elseif nb[1] > nb[2] and this_game[1] > this_game[2] then
				return true
			end
			return false
		end
	
	elseif no == 12 then
		function criteria(nb)
			if nb[1] < nb[3] and this_game[1] < this_game[3] then
				return true
			elseif nb[1] == nb[3] and this_game[1] == this_game[3] then
				return true
			elseif nb[1] > nb[3] and this_game[1] > this_game[3] then
				return true
			end
			return false
		end
	
	elseif no == 13 then
		function criteria(nb)
			if nb[2] < nb[3] and this_game[2] < this_game[3] then
				return true
			elseif nb[2] == nb[3] and this_game[2] == this_game[3] then
				return true
			elseif nb[2] > nb[3] and this_game[2] > this_game[3] then
				return true
			end
			return false
		end
	
	elseif no == 14 then
		function criteria(nb)
			if nb[1] < nb[2] and nb[1] < nb[3] and this_game[1] < this_game[2] and this_game[1] < this_game[3] then
				return true
			elseif nb[2] < nb[1] and nb[2] < nb[3] and this_game[2] < this_game[1] and this_game[2] < this_game[3] then
				return true
			elseif nb[3] < nb[2] and nb[3] < nb[1] and this_game[3] < this_game[2] and this_game[3] < this_game[1] then
				return true
			end
			return false
		end
	
	elseif no == 15 then
		function criteria(nb)
			if nb[1] > nb[2] and nb[1] > nb[3] and this_game[1] > this_game[2] and this_game[1] > this_game[3] then
				return true
			elseif nb[2] > nb[1] and nb[2] > nb[3] and this_game[2] > this_game[1] and this_game[2] > this_game[3] then
				return true
			elseif nb[3] > nb[2] and nb[3] > nb[1] and this_game[3] > this_game[2] and this_game[3] > this_game[1] then
				return true
			end
			return false
		end
	
	elseif no == 16 then
		function criteria(nb)
			nb_of_even_nb = count_nb_of_even(nb)
			nb_of_even_game = count_nb_of_even(this_game)
			if nb_of_even_nb < 2 and nb_of_even_game < 2 then
				return true
			elseif nb_of_even_nb >= 2 and nb_of_even_game >= 2 then
				return true
			end
			return false
		end
	
	elseif no == 17 then
		function criteria(nb)
			nb_of_even_nb = count_nb_of_even(nb)
			nb_of_even_game = count_nb_of_even(this_game)
			if nb_of_even_nb == nb_of_even_game then
				return true
			end
			return false
		end
	
	elseif no == 18 then
		function criteria(nb)
			if my_sum(nb) % 2 == my_sum(this_game) % 2 then
				return true
			end
			return false
		end
	
	elseif no == 19 then
		function criteria(nb)
			if nb[1] + nb[2] < 6 and this_game[1] + this_game[2] < 6 then
				return true
			elseif nb[1] + nb[2] == 6 and this_game[1] + this_game[2] == 6 then
				return true
			elseif nb[1] + nb[2] > 6 and this_game[1] + this_game[2] > 6 then
				return true
			end
		end
	
	elseif no == 20 then
		function criteria(nb)
			if nb[1] == nb[2] and nb[1] == nb[3] and this_game[1] == this_game[2] and this_game[1] == this_game[3] then
				return true
			elseif (nb[1] == nb[2] or nb[1] == nb[3] or nb[2] == nb[3]) and (this_game[1] == this_game[2] or this_game[1] == this_game[3] or this_game[2] == this_game[3]) then
			 return true
			elseif nb[1] != nb[2] and nb[1] != nb[3] and nb[2] != nb[3] and this_game[1] != this_game[2] and this_game[1] != this_game[3] and this_game[2] != this_game[3] then
				return true
			end
			return false
		end
	
	elseif no == 21 then
		function criteria(nb)
			if my_find_pair(nb) == my_find_pair(this_game) then
				return true
			end
			return false
		end
	
	elseif no == 22 then
		function criteria(nb)
			if my_find_ascend(nb) == my_find_ascend(this_game) and
					my_find_descend(nb) == my_find_descend(this_game) then
				return true
			end
			return false
		end
	
	elseif no == 23 then
		function criteria(nb)
			sum_nb = my_sum(nb)
			sum_game = my_sum(this_game)
			if (sum_nb < 6 and sum_game < 6) or
					(sum_nb == 6 and sum_game == 6) or
					(sum_nb > 6 and sum_game > 6) then
				return true
			end
			return false
		end
	
	elseif no == 24 then
		function criteria(nb)
			if my_nb_ascend(nb) == my_nb_ascend(this_game) then
				return true
			end
			return false
		end
	
	elseif no == 25 then
		function criteria(nb)
			if max(my_nb_ascend(nb), my_nb_descend(nb) == max(my_nb_ascend(this_game), my_nb_descend(this_game))) then
				return true
			end
			return false
		end
	
	elseif no == 26 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 27 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 28 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 29 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 30 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 31 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 32 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 33 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 34 then
		function criteria(nb)
			if nb[1] <= nb[2] and nb[1] <= nb[3] and this_game[1] <= this_game[2] and this_game[1] <= this_game[3] then
				return true
			elseif nb[2] <= nb[1] and nb[2] <= nb[3] and this_game[2] <= this_game[1] and this_game[2] <= this_game[3] then
				return true
			elseif nb[3] <= nb[2] and nb[3] <= nb[1] and this_game[3] <= this_game[2] and this_game[3] <= this_game[1] then
				return true
			end
			return false
		end
	
	elseif no == 35 then
		function criteria(nb)
			if nb[1] >= nb[2] and nb[1] >= nb[3] and this_game[1] >= this_game[2] and this_game[1] >= this_game[3] then
				return true
			elseif nb[2] >= nb[1] and nb[2] >= nb[3] and this_game[2] >= this_game[1] and this_game[2] >= this_game[3] then
				return true
			elseif nb[3] >= nb[2] and nb[3] >= nb[1] and this_game[3] >= this_game[2] and this_game[3] >= this_game[1] then
				return true
			end
			return false
		end
	
	elseif no == 36 then
		function criteria(nb)
			sum_nb = my_sum(nb)
			sum_game = my_sum(this_game)
			if sum_nb % 3 == 0 and sum_game % 3 == 0 then
				return true
			elseif sum_nb % 4 == 0 and sum_game % 4 == 0 then
				return true
			elseif sum_nb % 5 == 0 and sum_game % 5 == 0 then
				return true
			end
			return false
		end
	
	elseif no == 37 then
		function criteria(nb)
			if (nb[1] + nb[2] == 4 and this_game[1] + this_game[2] == 4) or
					(nb[1] + nb[3] == 4 and this_game[1] + this_game[3] == 4) or
					(nb[2] + nb[3] == 4 and this_game[2] + this_game[3] == 4) then
				return true
			end
			return false
		end
	
	elseif no == 38 then
		function criteria(nb)
			if (nb[1] + nb[2] == 6 and this_game[1] + this_game[2] == 6) or
					(nb[1] + nb[3] == 6 and this_game[1] + this_game[3] == 6) or
					(nb[2] + nb[3] == 6 and this_game[2] + this_game[3] == 6) then
				return true
			end
			return false
		end
	
	elseif no == 39 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 40 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 41 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 42 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 43 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 44 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 45 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 46 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 47 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	elseif no == 48 then
		-- this one doesn't work
		function criteria(nb)
			return false
		end
	
	end
	return criteria
end

function criteria_name(no)
	if no == 1 then
		return "‚òÖ = 1 | ‚òÖ > 1"
	elseif no == 2 then
		return "‚òÖ < | = | > 3"
	elseif no == 3 then
		return "‚ñà < | = | > 3"
	elseif no == 4 then
		return "‚ñà < | = | > 4"
	elseif no == 5 then
		return "‚òÖ is even | odd"
	elseif no == 6 then
		return "‚ñà is even | odd"
	elseif no == 7 then
		return "‚óè is even | odd"
	elseif no == 8 then
		return "number of 1s"
	elseif no == 9 then
		return "number of 3s"
	elseif no == 10 then
		return "number of 4s"
	elseif no == 11 then
		return "‚òÖ < | = | > ‚ñà"
	elseif no == 12 then
		return "‚òÖ < | = | > ‚óè"
	elseif no == 13 then
		return "‚ñà < | = | > ‚óè"
	elseif no == 14 then
		return "‚òÖ|‚ñà|‚óè smallest?"
	elseif no == 15 then
		return "‚òÖ|‚ñà|‚óè largest?"
	elseif no == 16 then
		return "even > odd | even < odd"
	elseif no == 17 then
		return "number of even's"
	elseif no == 18 then
		return "‚òÖ+‚ñà+‚óè = even | odd"
	elseif no == 19 then
		return "‚òÖ+‚ñà < | = | > 6"
	elseif no == 20 then
		return "triple | double | none"
	elseif no == 21 then
		return "a pair or no?"
	elseif no == 22 then
		return "ascending or descending?"
	elseif no == 23 then
		return "‚òÖ+‚ñà+‚óè < | = | > 6"
	elseif no == 24 then
		return "swquence of ascending"
	elseif no == 25 then
		return "consecutive a(de)scending"
	elseif no == 26 then
		return "sorry, this doesn't work"
	elseif no == 27 then
		return "sorry, this doesn't work"
	elseif no == 28 then
		return "sorry, this doesn't work"
	elseif no == 29 then
		return "sorry, this doesn't work"
	elseif no == 30 then
		return "sorry, this doesn't work"
	elseif no == 31 then
		return "sorry, this doesn't work"
	elseif no == 32 then
		return "sorry, this doesn't work"
	elseif no == 33 then
		return "sorry, this doesn't work"
	elseif no == 34 then
		return "‚òÖ|‚ñà|‚óè smallest or tie?"
	elseif no == 35 then
		return "‚òÖ|‚ñà|‚óè largest or tie?"
	elseif no == 36 then
		return "‚òÖ+‚ñà+‚óè multiple of 3|4|5"
	elseif no == 37 then
		return "sum of which two = 4"
	elseif no == 38 then
		return "sum of which two = 6"
	elseif no == 39 then
		return "sorry, this doesn't work"
	elseif no == 40 then
		return "sorry, this doesn't work"
	elseif no == 41 then
		return "sorry, this doesn't work"
	elseif no == 42 then
		return "sorry, this doesn't work"
	elseif no == 43 then
		return "sorry, this doesn't work"
	elseif no == 44 then
		return "sorry, this doesn't work"
	elseif no == 45 then
		return "sorry, this doesn't work"
	elseif no == 46 then
		return "sorry, this doesn't work"
	elseif no == 47 then
		return "sorry, this doesn't work"
	elseif no == 48 then
		return "sorry, this doesn't work"
	end
end
-->8
-- number screen

function draw_number_screen()
	draw_game()
	print("select your guess", 28, 60, 3)
	
	print(my_guess[1].." "..my_guess[2].." "..my_guess[3], 49, 21, 11)
	for i = 1, 3 do
		spr(12, 39 + 8 * i, 15)
		spr(28, 39 + 8 * i, 24)
	end
	
	i = number_id - 1
	print(my_guess[number_id], 49 + i * 8, 21, 10)
end

function update_number_screen()
	if btnp(‚û°Ô∏è) then
		if number_id <= 2 then
			number_id = number_id + 1
		else
			number_id = 1
			_draw = draw_final_answer
			_update = update_final_answer
		end
	elseif btnp(‚¨ÖÔ∏è) and number_id >= 2 then
		number_id = number_id - 1
	elseif btnp(‚¨ÜÔ∏è) and my_guess[number_id] < 5 then
	 my_guess[number_id] = my_guess[number_id] + 1
	elseif btnp(‚¨áÔ∏è) and my_guess[number_id] > 1 then
		my_guess[number_id] = my_guess[number_id] - 1
	end
	
	if btnp(‚ùé) then
		nb_check_one_round = 0
		nb_round = nb_round + 1
		checked_crit = {0, 0, 0}
		_draw = draw_criterias
		_update = update_criterias
	end
	
	if btnp(üÖæÔ∏è) then
		_draw = build_menu
		_update = update_menu
		_init()
	end
end
-->8
-- criterias

function draw_criterias()
	draw_game()
	print("check up to 3 criterias", 18, 60, 3)
	
	print(">", 20, 65 + criteria_check_id *  10, 11)
end

function update_criterias()
	if btnp(üÖæÔ∏è) then
		_draw = draw_number_screen
		_update = update_number_screen
	end
	
	if btnp(‚¨ÜÔ∏è) and criteria_check_id >= 2 then
		criteria_check_id = criteria_check_id - 1
	elseif btnp(‚¨áÔ∏è) and criteria_check_id <= 3 then
		criteria_check_id = criteria_check_id + 1
	end
	
	if btnp(‚ùé) then
		if checked_crit[criteria_check_id] == 1 then
			_draw = already_checked
		elseif nb_check_one_round < 3 then
			nb_check = nb_check + 1
			nb_check_one_round = nb_check_one_round + 1
			checked_crit[criteria_check_id] = 1
			check_criteria(criteria_check_id)
		else
			_draw = maximum_check_reached
		end
	end
end

function check_criteria(no)
	if criterias[no]['check'](my_guess) then
		sfx(1)
		hp = 0
		_draw = happy
	else
		sfx(2)
		sd = 0
		_draw = sad
	end
end

function happy()
	draw_criterias()
	fill_pc_screen()
	fill_right()
	
	if hp < 1.9 then
		hp = hp + 0.05
	else
		hp = 0
	end
	spr(happy_frames[flr(hp) + 1], 
				50, 14, 2, 2)
	
--	circ(105, 30, 10, 11)
	
	spr(72, 90, 10, 4, 4)
end

function sad()
	draw_criterias()
	fill_pc_screen()
	fill_right()
	
	if sd < 1.9 then
		sd = sd + 0.05
	else
		sd = 0
	end
	spr(sad_frames[flr(sd) + 1], 
				50, 14, 2, 2)
	
--	line(95, 20, 115, 40, 8)
--	line(95, 40, 115, 20, 8)
	
	spr(76, 90, 10, 4, 4)
end

function maximum_check_reached()
	draw_game()
	print("maximum 3 check in one round", 8, 60, 10)
end

function already_checked()
	draw_game()
	print("already checked this criteria", 8, 60, 10)
	
	print(">", 20, 65 + criteria_check_id *  10, 11)
end
-->8
-- final answer

function draw_final_answer()
	draw_game()
	print("select final answer", 24, 60, 3)
	
	i = number_id - 1
	print(final_answer[number_id], 94 + i * 8, 32, 10)
end

function update_final_answer()
	if btnp(‚¨ÖÔ∏è) then
		if number_id >= 2 then
			number_id = number_id - 1
		else
			number_id = 3
			_draw = draw_number_screen
			_update = update_number_screen
		end
	elseif btnp(‚û°Ô∏è) and number_id <= 2 then
		number_id = number_id + 1
	elseif btnp(‚¨ÜÔ∏è) and final_answer[number_id] < 5 then
	 final_answer[number_id] = final_answer[number_id] + 1
	elseif btnp(‚¨áÔ∏è) and final_answer[number_id] > 1 then
		final_answer[number_id] = final_answer[number_id] - 1
	end
	
	if btnp(‚ùé) then
		if check_final_answer() then
		 music(-1)
			sfx(3)
			_draw = draw_win
		else
			music(-1)
			sfx(9)
			_draw = draw_loose
		end
	end
end

function draw_win()
	draw_game()
	fill_pc_screen()
	
	print("you\nwon!", 50, 16, 11)
	
	back_to_main_menu()
end

function draw_loose()
 draw_game()
 fill_pc_screen()
 
 print("you\nlose", 50, 16, 8)
 
 back_to_main_menu()
end

function check_final_answer()
	win = true
	for i = 1, 3 do
		if final_answer[i] != this_game[i] then
			win = false
		end
	end
	return win
end

function back_to_main_menu()
	print("press üÖæÔ∏è to start again", 20, 60, 3)
	
	if btnp(üÖæÔ∏è) then
 	_draw = build_menu
 	_update = update_menu
 	_init()
 end
end
-->8
-- misc

function build_pc()
	cls()
	map()
end

function count_nb_of_even(list)
	nb_even = 0
	for i = 1,3 do
		if list[i] % 2 == 0 then
			nb_even = nb_even + 1
		end
	end
	return nb_even
end

function my_count(list, sth)
	nb_of_sth = 0
	for i = 1,3 do
		if list[i] == sth then
			nb_of_sth = nb_of_sth + 1
		end
	end
	return nb_of_sth
end

function my_find_pair(list)
	if (list[1] == list[2] and list[1] != list[3]) or 
			(list[2] == list[3] and list[1] != list[3]) or 
			(list[1] == list[3] and list[1] != list[2]) then
		return true
	else
		return false
	end
end

function my_find_ascend(list)
	if list[1] < list[2] and list[2] < list[3] then
		return true
	end
	return false
end

function my_find_descend(list)
	if list[1] > list[2] and list[2] > list[3] then
		return true
	end
	return false
end

function my_nb_ascend(list)
	if list[3] - list[2] == 1 then
		if list[2] - list[1] == 1 then
			return 3
		end
		return 2
	end
	if list[2] - list[1] == 1 then
		return 2
	end
	return 0
end

function my_nb_descend(list)
	if list[1] - list[2] == 1 then
		if list[2] - list[3] == 1 then
			return 3
		end
		return 2
	end
	if list[2] - list[3] == 1 then
		return 2
	end
	return 0
end

function my_sum(list)
	return list[1] + list[2] + list[3]
end

function fill_pc_screen()
	rectfill(45, 11, 70, 30, 0)
end

function fill_right()
	rectfill(90, 10, 120, 40, 0)
end
-->8
-- game data

games = {{2, 4, 1, 4, 9, 11, 14}, 
									{4, 3, 5, 3, 7, 10, 14}, 
									{3, 3, 1, 4, 9, 13, 17}, 
									{3, 4, 5, 3, 8, 15, 16}, 
									{3, 5, 4, 2, 6, 14, 17}, 
									{5, 1, 2, 2, 7, 10, 13}, 
									{2, 4, 1, 8, 12, 15, 17}, 
									{3, 1, 4, 2, 10, 11, 16}, 
									{1, 3, 5, 3, 7, 8, 15}, 
									{4, 2, 3, 5, 8, 13, 15}, 
									{5, 2, 1, 3, 9, 14, 17}, 
									{2, 4, 5, 4, 11, 15, 17}, 
									{3, 4, 5, 2, 6, 14, 16}, 
									{3, 2, 3, 7, 9, 13, 17}, 
									{1, 4, 2, 2, 5, 13, 16}, 
									{2, 4, 1, 4, 5, 12, 15}, 
									{2, 1, 4, 3, 6, 12, 16}, 
									{5, 5, 1, 4, 9, 12, 17}, 
									{4, 3, 4, 3, 7, 12, 14}, 
									{1, 2, 2, 4, 9, 13, 14}, 
									{1, 2, 4, 2, 5, 13, 17}, 
									{2, 1, 2, 3, 6, 10, 16}, 
									{2, 4, 3, 4, 8, 12, 15}, 
									{5, 4, 4, 6, 10, 11, 17},
									{2, 3, 5, 1, 10, 13, 14}, 
									{5, 3, 1, 3, 9, 14, 17}, 
									{2, 2, 1, 7, 10, 12, 16}, 
									{5, 5, 3, 3, 6, 9, 11}, 
									{4, 3, 5, 2, 8, 15, 16}, 
									{3, 4, 1, 2, 7, 10, 14}, 
									{1, 3, 2, 1, 7, 9, 15}, 
									{5, 3, 4, 3, 5, 14, 17}, 
									{1, 4, 2, 6, 9, 12, 15}, 
									{1, 3, 1, 4, 6, 8, 12}, 
									{1, 2, 2, 2, 5, 10, 17}, 
									{3, 1, 1, 2, 13, 15, 16}, 
									{2, 5, 3, 4, 5, 9, 14}, 
									{4, 3, 4, 2, 7, 9, 12}, 
									{1, 2, 1, 4, 8, 15, 17}, 
									{1, 2, 2, 2, 5, 10, 16}, 
									{1, 3, 5, 1, 8, 13, 17}, 
									{5, 2, 3, 3, 8, 15, 16}}
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000030000003000000033300003330000000000000ccc0000003330000333000
00000000000000000000000000000000000000000000000000000000000000000003b300003b3000003bbb3003bbb300000300000ccccc00003bbb3003bbb300
0000000000000000000000000000000000000000000000000000000000000000003b3b3003b3b30000b303b00b303b0000303000000000000003330000333000
00000000000000000000000000000000000000000000000000000000000000000003030000303000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001666666666666666666666666665555055555555100000000000000000033003300000000003000030000000000000009999000000333333330000
000000000016666666666666666666666666655550555555551000000000000000003bb33bb3000000003b3333b3000000000000009999000003bbbbbbbb3000
0000000000166000000000000000000000000005505555555510000000000000000003bbbb30000000003bbbbbb300000030300000999900003b3b3bb3b3b300
00000000001660000000000000000000000000055055555555510000000000000000003bb30000000000003bb30000000003000000999900003bbbbbbbbbb300
00000000001660000000000000000000000000055055555555510000000000000000000330000000000000033000000000000000000000000003333333333000
00000000001660000000000000000000000000055055555555510000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001660000000000000000000000000055055555555510000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001660000000000000000000000000055055555555551000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001660000000000000000000000000055055555555551000000000000000000000000000000000000000000000000000000d00000000000000000000
0000000000166000000000000000000000000005505555555555100000000000000000000000000000000000000000000000000000ddd0000000000000000000
000000000016600000000000000000000000000550555555555510000000000000033300003330000000330000330000000000000ddddd000000000000000000
0000000000166000000000000000000000000005505550000555100000000000003bbb3003bbb3000003bb3003bb30000000000000ddd0000000000000000000
00000000001660000000000000000000000000055055555555551000000000000003330000333000003b33000033b30000000000000d00000000000000000000
00000000001660000000000000000000000000055055555555551000000000000000000000000000000300000000300000000000000000000000000000000000
00000000001660000000000000000000000000055055500005551000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001660000000000000000000000000055055555555551000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001660000000000000000000000000055055555555551000000000000000000330000000000000033000000000000000000000000000000000000000
00000000001660000000000000000000000000055055500005551000000000000000033bb33000000000003bb300000000000000000000000000000000000000
000000000016600000000000000000000000000550555555555510000000000000003bbbbbb30000000003bbbb30000000000000000000000000000000000000
00000000001660000000000000000000000000055055555555551000000000000003bb3333bb300000003bb33bb3000000000000000000000000000000000000
00000000001660000000000000000000000000055055555555551000000000000003b300003b300000003b3003b3000000000000000000000000000000000000
00000000001660000000000000000000000000055055555511110000000000000000300000030000000003000030000000000000000000000000000000000000
00000000001660000000000000000000000000055055555555510000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001666666666666666666665555555555055555555510000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001666666666666666666665555555555055555555510000000000000000000000000000000000000000000000000000000000000000000000000000
000000000016666aa666996666666655555555555055555555100000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001666666666666666656555555555555055555555100000000000000001111111111111111111111111110000011111111111111111111111111100
00000000001666666666666666665555555555555055555555100000000000000001333333333333333333333333310000014444444444444444444444444100
00000000000111100000000000000000000000000000000110000000000000000001333333333333333333333333310000014444444444444444444444444100
00000000000000010555555555555555555555055555501000000000000000000001333333333333333333333333310000014444444444444444444444444100
000000000000000105555555555555555555550555550010000000000000000000013333333333bbbbb333333333310000014444444444444444444444444100
0000000000011110000000000000000000000000000000011111000000000000000133333333bbbbbbbbb3333333310000014444884444444444444884444100
00000000001666666666666666666666655555555055555555551000000000000001333333bbbb33333bbbb33333310000014444888444444444448884444100
0000000000166666666666666666666665555555505555555555100000000000000133333bbb333333333bbb3333310000014444488844444444488844444100
0000000000165555000000000000000000000055505555555555100000000000000133333bb33333333333bb3333310000014444448884444444888444444100
000000000016555500000000000000000000005550555555555510000000000000013333bb3333333333333bb333310000014444444888444448884444444100
000000000016666666666666666655555555555550555555555510000000000000013333bb3333333333333bb333310000014444444488844488844444444100
00000000001666666666666666655555555555555055555555551000000000000001333bb333333333333333bb33310000014444444448884888444444444100
00000001110000000000000000000000000055555055555555551000000000000001333bb333333333333333bb33310000014444444444888884444444444100
00000001666666666666666666666666666055555000055555551000000000000001333bb333333333333333bb33310000014444444444488844444444444100
00000001666666666666666666666666666055550055005555551000000000000001333bb333333333333333bb33310000014444444444888884444444444100
00000001666666666666666666666666666055506655550555551000000000000001333bb333333333333333bb33310000014444444448884888444444444100
000000016666666666666666666666666660555065555505555510000000000000013333bb3333333333333bb333310000014444444488844488844444444100
000000011111111111111111111111111111111111111111111100000000000000013333bb3333333333333bb333310000014444444888444448884444444100
0000000000000000000000000000000000000000000000000000000000000000000133333bb33333333333bb3333310000014444448884444444888444444100
0000000000000000000000000000000000000000000000000000000000000000000133333bbb333333333bbb3333310000014444488844444444488844444100
00000000000000000000000000000000000000000000000000000000000000000001333333bbbb33333bbbb33333310000014444888444444444448884444100
0000000000000000000000000000000000000000000000000000000000000000000133333333bbbbbbbbb3333333310000014444884444444444444884444100
000000000000000000000000000000000000000000000000000000000000000000013333333333bbbbb333333333310000014444444444444444444444444100
00000000000000000000000000000000000000000000000000000000000000000001333333333333333333333333310000014444444444444444444444444100
00000000000000000000000000000000000000000000000000000000000000000001333333333333333333333333310000014444444444444444444444444100
00000000000000000000000000000000000000000000000000000000000000000001333333333333333333333333310000014444444444444444444444444100
00000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111110000011111111111111111111111111100
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000001111111111111111111111111111111111111110000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016666666666666666666666666655550555555551000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016666666666666666666666666655550555555551000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555551000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555555100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555555100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555555100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555555100000000666066606600666060000000000000000000
00000000000000000000000000000000000000000016600000b0b00bb0b0b0000000000550555555555510000000600006006060606060000000000000000000
00000000000000000000000000000000000000000016600000b0b0b0b0b0b0000000000550555555555510000000660006006060666060000000000000000000
00000000000000000000000000000000000000000016600000bbb0b0b0b0b0000000000550555555555510000000600006006060606060000000000000000000
0000000000000000000000000000000000000000001660000000b0b0b0b0b0000000000550555555555510000000600066606060606066600000000000000000
00000000000000000000000000000000000000000016600000bbb0bb000bb0000000000550555000055510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555555510000000666066000660606066606660000000000000
00000666006606060660066000000660000000000016600000b0b00bb0bb000b0000000550555555555510000000606060606000606060006060060000000000
00000606060606060606060600600060000000000016600000b0b0b0b0b0b00b0000000550555000055510000000666060606660606066006600000000000000
00000660060606060606060600000060000000000016600000b0b0b0b0b0b00b0000000550555555555510000000606060600060666060006060060000000000
00000606060606060606060600600060000000000016600000bbb0b0b0b0b0000000000550555555555510000000606060606600666066606060000000000000
00000606066000660606066600000666000000000016600000bbb0bb00b0b00b0000000550555000055510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016600000000000000000000000000550555555555510000000000300000003000000030000000000000000
00000066060606660066060600000666000000000016600000000000000000000000000550555555111100000000003030000030300000303000000000000000
00000600060606000600060600600006000000000016600000000000000000000000000550555555555100000000000000000000000000000000000000000000
0000060006660660060006600000066600000000001666666666666666666665555555555055555555510000000000bbb00000b0b00000bb0000000000000000
000006000606060006000606006006000000000000166666666666666666666555555555505555555551000000000000b00000b0b000000b0000000000000000
00000066060606660066060600000666000000000016666aa666996666666655555555555055555555100000000000bbb00000bbb000000b0000000000000000
0000000000000000000000000000000000000000001666666666666666656555555555555055555555100000000000b000000000b000000b0000000000000000
0000000000000000000000000000000000000000001666666666666666665555555555555055555555100000000000bbb0000000b00000bbb000000000000000
00000000000000000000000000000000000000000001111000000000000000000000000000000001100000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000105555555555555555555550555555010000000000000003030000030300000303000000000000000
00000000000000000000000000000000000000000000000105555555555555555555550555550010000000000000000300000003000000030000000000000000
00000000000000000000000000000000000000000001111000000000000000000000000000000001111100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016666666666666666666666555555550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016666666666666666666666555555550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016555500000000000000000000005550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016555500000000000000000000005550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016666666666666666655555555555550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000000016666666666666666555555555555550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000011100000000000000000000000000555550555555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000016666666666666666666666666660555550000555555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000016666666666666666666666666660555500550055555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000016666666666666666666666666660555066555505555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000016666666666666666666666666660555065555505555510000000000000000000000000000000000000000000
00000000000000000000000000000000000000011111111111111111111111111111111111111111111100000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000333033303330033003300000033333000000333003300000033033303330333033300000333003303330333033000000000000000000
00000000000000000000303030303000300030000000330003300000030030300000300003003030303003000000303030003030030030300000000000000000
00000000000000000000333033003300333033300000330303300000030030300000333003003330330003000000333030003330030030300000000000000000
00000000000000000000300030303000003000300000330003300000030030300000003003003030303003000000303030303030030030300000000000000000
00000000000000000000300030303330330033000000033333000000030033000000330003003030303003000000303033303030333030300000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000077777770000000700000070000000000000007000000700000007070000000000000000000000000000000000000000000
00000000000000000000000000000077777770000007000000070000007770000007000000070000007070000000000000000000000000000000000000000000
00000000000000000000000000000077777770000070000000070000000000000007000000007000007770000000000000000000000000000000000000000000
00000000000000000000000000000077777770000007000000070000007770000007000000070000000070000000000000000000000000000000000000000000
00000000000000000000000000000077777770000000700000070000000000000007000000700000000070000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000077007070777077707770777000000770777000007770077000000000000000000000000000000000000000000000000000
00000000000000000000000000000070707070777070707000707000007070700000000070700000000000000000000000000000000000000000000000000000
00000000000000000000000000000070707070707077007700770000007070770000000770777000000000000000000000000000000000000000000000000000
00000000000000000000000000000070707070707070707000707000007070700000000070007000000000000000000000000000000000000000000000000000
00000000000000000000000000000070700770707077707770707000007700700000007770770000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000070000000000700000070000000000000007000000700000007777777000000000000000000000000000000000000000
00000000000000000000000000000000777000000007000000070000007770000007000000070000007777777000000000000000000000000000000000000000
00000000000000000000000000000077777770000070000000070000000000000007000000007000007777777000000000000000000000000000000000000000
00000000000000000000000000000007777700000007000000070000007770000007000000070000007777777000000000000000000000000000000000000000
00000000000000000000000000000007000700000000700000070000000000000007000000700000007777777000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000070000070077777770070000777000000007707770777070007000777007707770777000000000000000000000000000
00000000000000000000000000000000777000070077777770070007770700000070007770707070007000700070000700007000000000000000000000000000
00000000000000000000000000000077777770070077777770070007777700000077707070777070007000770077700700077000000000000000000000000000
00000000000000000000000000000007777700070077777770070007777700000000707070707070007000700000700700000000000000000000000000000000
00000000000000000000000000000007000700070077777770070000777000000077007070707077707770777077000700070000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000333330000000000033033303000333003303330000003333300000000003330333003303030000000000000000000000000000
00000000000000000000000003303033003000000300030003000300030000300000033000330030000003030303030003030000000000000000000000000000
00000000000000000000000003330333000000000333033003000330030000300000033030330000000003300333030003300000000000000000000000000000
00000000000000000000000003303033003000000003030003000300030000300000033000330030000003030303030003030000000000000000000000000000
00000000000000000000000000333330000000000330033303330333003300300000003333300000000003330303003303030000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__map__
0000000000010203040506070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000010111213141516170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000020212223242526270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000030313233343536370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000040414243444546470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000050515253545556570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000060616263646566670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000070717273747576770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010100002550025500255002550025500255002150021500215002150021500215002150021500255002550025500255002550025500215002150021500215002150021500215002150021500215002150021500
290220001955019550195502555025550255502155021550215502155021550215502155021550255502555025550255502555025550215502155021550215502155021550215502155021550215502155021550
250220000255002550025500255002550025500255002550025500255018000025500255002550025500255002550025500255002550025500255002550025500255002550025500255002550025500255000000
210a20002405000000240500000024050000002405024050240500000000000200502005020050200500000022050220502205022050000002405024050240500000022050000002405024050240502405024050
991e0000020500e0501705015050170500e050170500e050020500e0501705015050170500e050170500e05002050100501805017050180501005018050100500205010050180501705018050100501805010050
991e00000205012050180501705018050120501805012050020501205018050170501805012050180501205007050130501705015050170501305017050130500705013050170501505017050130501705012050
991e000002050100501705015050170501305012050130500b0500e0500d0500b0500d050130501505013050150501305015050130500d0501305015050130501505013050150501305012050150501a05019050
991e00001a050150501305015050120501505013050150500e05012050100500e050010500d0501305012050130500d050130500d050010500d0501305012050130500d050130500d050010500d0500e05010050
991e10000e0500d0500b0501a05019050170502605025050230502105025050260502605026050260502605000000000000000000000000000000000000000000000000000000000000000000000000000000000
3d1910001e5541e552000001d5541d552000001c5541c5521c5001b5541b5511b5511b5511b5511b5550000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c12000001e5001d5001c5001b50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
01 04424344
00 05424344
00 06424344
00 07424344
02 08424344

